/* Dedicated to the public domain under CC0: https://creativecommons.org/publicdomain/zero/1.0/. */

/* Chart layout. */
figure.chart {
}
figure.chart > figcaption {
}
figure.chart > .legend {
}
figure.chart > .vis-grid {
  /* This 2x2 grid allocates minimum space for the gutter/tick areas,
  and devotes the remaining space to the data visualization area. */
  display: grid;
  grid-template-columns: min-content auto; /* Left gutter, vis. */
  grid-template-rows: auto min-content; /* vis, bottom gutter. */
  grid-column-gap: 0px;
  grid-row-gap: 0px;
}

/* Quadrant scroll containers. */
figure.chart .ticks-y-scroll { /* The y-axis tick marks on the left. */
  grid-area: 1 / 1 / 2 / 2; /* row-start / column-start / row-end / column-end */
}
figure.chart .vis-scroll { /* The data visualization scolling container. */
  grid-area: 1 / 2 / 2 / 3;
}
figure.chart .origin { /* The small square at the lower-left origin. */
  grid-area: 2 / 1 / 3 / 2;
}
figure.chart .ticks-x-scroll { /* The x-axis tick marks on the bottom. */
  grid-area: 2 / 2 / 3 / 3;
}

/* Quadrant scrolling container sizing. */
figure.chart :is(.vis-scroll, .ticks-x-scroll) {
  overflow-x: auto;
  scrollbar-height: none; /* Hide scrollbar for Firefox. */
}
figure.chart :is(.vis-scroll, .ticks-y-scroll) {
  overflow-y: auto;
  scrollbar-width: none; /* Hide scrollbar for Firefox. */
}
figure.chart :is(.vis-scroll, .ticks-x-scroll)::-webkit-scrollbar { /* Hide scrollbar for Chrome, Safari, and Opera. */
  height: 0;
}
figure.chart :is(.vis-scroll, .ticks-y-scroll)::-webkit-scrollbar { /* Hide scrollbar for Chrome, Safari, and Opera. */
  width: 0;
}

/* Quadrant scroll content sizing. */
figure.chart :is(.vis, .ticks-x) {
  min-width: 100%;
  width: calc(1em * var(--vis-w));
}
figure.chart :is(.vis, .ticks-y) {
  min-height: 100%;
  height: calc(1em * var(--vis-h));
}

/* Tick marks positioning trick:
We use relative positioning so that the tick elements participate in document layout and influence the sizes of the gutters
(height for ticks-x, width for ticks-y).
The zero width/height lets us use the CSS variable to position the tick mark itself.
If we instead used absolute positioning, then the tick text would not participate in document layout.
Because of this trick, we are obliged to use a child div to hold the text.
The parent div has zero height, so the text hangs below the specified vertical position.
The child div allows us to transform the text and center it around the specified position.
*/

/* The x-axis tick mark gutter on the bottom. */
figure.chart .ticks-x {
  position: relative;
}
figure.chart .ticks-x > div {
  display: inline-block;
  float: left; /* Prevent syntactic whitespace between divs from showing, which breaks the relative spacing trick. */
  margin: 0;
  padding: 0;
  position: relative;
  width: 0;
  background-color: red;
  left: calc(100% * calc(var(--v)));
}
figure.chart .ticks-x > div > div {
  display: inline-block;
  vertical-align: top;
  writing-mode: vertical-rl;
  transform-origin: center;
  transform: rotate(180deg);
  border: 1px solid black;
  background-color: white;
}

figure.chart .ticks-x > div > div::after {
  /* This ::after element is used to render the tick mark. */
  /* TODO
  content: '\\a0'; /* A nonbreaking space to prevent the div from collapsing. */
  margin-left: 0.125em;
  clip-path: polygon(0 calc(50% - 0.5px), 0 calc(50% + 0.5px), 100% calc(50% + 0.5px), 100% calc(50% - 0.5px));
  */
}

/* The y-axis tick mark gutter on the left. */
figure.chart .ticks-y {
  position: relative;
  /* TODO: negative padding and compensation so that the start and end tick text does not clip, but stays aligned. */
}
figure.chart .ticks-y > div {
  position: relative;
  height: 0;
  top: calc(100% * calc(1 - var(--v)));
}
figure.chart .ticks-y > div > div {
  /* We are obliged to use a child div to hold the text.
  Because the parent div has zero height, the text hangs below the specified vertical position.
  The child div allows us to transform the text and center it around the specified position. */
  transform: translateY(-50%);
}
figure.chart .ticks-y > div > div::after {
  /* This ::after element is used to render the tick mark. */
  content: '\\a0'; /* A nonbreaking space to prevent the div from collapsing. */
  margin-left: 0.125em;
  clip-path: polygon(0 calc(50% - 0.5px), 0 calc(50% + 0.5px), 100% calc(50% + 0.5px), 100% calc(50% - 0.5px));
}

figure.chart .vis { /* The data visualization area. */
  position: relative;
}
figure.chart .vis > .series {
  position: absolute;
  width: 100%;
  height: 100%;
}
figure.chart .series.categorical-numerical > div {
  position: absolute;
  width: 1em;
  min-width: 1em;
  height: calc(100% * calc(var(--vy)));
  left: calc(100% * calc(var(--vx)));
  bottom: 0;
  background-color: var(--series-color);
}
.swatch {
  display: inline-block;
  background-color: var(--series-color);
}

/* User style. */
figure.chart * {
  box-sizing: border-box;
}
figure.chart {
  width: 96%;
  margin: 0 auto;
  background-color: red;
  --series-color: gray; /* Default, can be overridden per series. */
}
figure.chart > figcaption {
  padding: 0.5em 0;
  background-color: #8D6;
}
figure.chart > .legend {
  padding: 0.5em 0;
  background-color: lightgray;
}
figure.chart .vis-grid {
  background-color: yellow;
}
figure.chart .origin {
  background-color: #DDF;
}
figure.chart .vis-scroll {
  height: 24em;
}
figure.chart .ticks-x {
  background-color: lightgreen;
}

figure.chart .ticks-x > div > div {

}
figure.chart .ticks-y {
  background-color: #8DD;
}
figure.chart .ticks-y > div {
  text-align: right;
}
figure.chart .ticks-y.numerical > div > div::after {
  /* This ::after element is used to render the tick mark. */
  width: 0.25em;
  background-color: black;
}
figure.chart .series {
  column-gap: 4px;
}
figure.chart .series > div {
    border: 1px solid black;
}

figure.chart .Series0 {
  --series-color: coral;
}
figure.chart .Series1 {
  --series-color: lightblue;
}
.swatch {
  width: 1em;
  height: 1em;
  margin-right: 0.5em;
  vertical-align: middle;
  border-radius: 0.25em;
}
