/* Dedicated to the public domain under CC0: https://creativecommons.org/publicdomain/zero/1.0/. */

/* Chart layout. */
figure.chart {
  display: flex;
  flex-direction: column;
}

figure.chart.categorical-numerical {
  --tick-len: 0.25rem;
  --tick-font-scale: 0.75;
  --last-label-width: calc(0.707 * (var(--x-last-label-len) + 0.5em) * var(--tick-font-scale));
  /* "packed" means the width calculations when there are enough bars that we cannot fit them all on the screen. */
  --packed-bar-step: 1rem; /* The minimum bar step. */
  --packed-bar-half: calc(0.5 * var(--packed-bar-step));
  --packed-last-half: max(var(--packed-bar-half), var(--last-label-width));
  --packed-bars-width: calc(var(--packed-bar-half) * (2*var(--nx) - 1) + var(--packed-last-half));
  --packed-vis-width: calc(var(--packed-bars-width) + 1px);
  /* "wide" means the width calculations when there are not enough bars to fill the screen. */
  --wide-vis-width: 100%;
  --wide-bars-width: calc(var(--wide-vis-width) - 1px);
  --wide-bar-half-ideal: calc(var(--wide-bars-width) / (var(--nx) * 2));
  --wide-bar-half-spill: calc((var(--wide-bars-width) - var(--last-label-width)) / (var(--nx) * 2 - 1));
  --wide-bar-half: min(var(--wide-bar-half-ideal), var(--wide-bar-half-spill));

  --bar-step: calc(2 * max(var(--packed-bar-half), var(--wide-bar-half)));
  --bar-width: calc(var(--bar-step) - 1px);
  --vis-width: max(var(--packed-vis-width), var(--wide-vis-width));
}

figure.chart > .vis-row {
  /* The top level container for gutter-left and vis-scroll. */
  flex-grow: 1; /* Expand to fill remaining space of chart. */
  display: flex;
  flex-direction: row;
  column-gap: 0;
}

figure.chart > .vis-row > .gutter-left {
  flex: 0 0 auto; /* Shrink to fit; equivalent to min-content in grid. */
  display: flex;
  flex-direction: column-reverse;
  row-gap: 0;
}

figure.chart > .vis-row > .vis-scroll {
  /* X-axis scrollable area containing the visualization and the gutter-bottom.
  Y-axis scrolling is unnecessary and would prevent the tick text from overflowing properly. */
  flex: 1 1 auto; /* Fill space; equivalent to auto in grid. */
  display: flex;
  flex-direction: column-reverse;
  row-gap: 0;
  min-width: 4rem;
  min-height: 1rem;
  overflow-x: auto;
}

@supports(scrollbar-width:none) {
  figure.chart > .vis-row > .vis-scroll {
    scrollbar-width: none; /* Hide scrollbar for Firefox. */
  }
}

figure.chart > .vis-row > .vis-scroll::-webkit-scrollbar { /* Hide scrollbar for Chrome, Safari, and Opera. */
  overscroll-behavior: contain;
}

figure.chart :is(.vis, .ticks.y) {
  flex: 1 1 auto; /* Equivalent to auto in grid. */
  min-height: calc(var(--tick-y-count) * 1em);
}

figure.chart :is(.origin, .ticks.x) {
  height: calc(0.707 * var(--tick-font-scale) * var(--max-tick-x-label-len) + var(--tick-len) + 0.5rem);
  min-height:1ch;

}

/* Tick gutters. */

figure.chart .ticks {
  position: relative;
}

figure.chart .ticks > div > span {
  display: inline-block;
}
figure.chart .ticks > div > span.label {
  vertical-align: top;
}

figure.chart .ticks > div > span.tick {
  vertical-align: top;
}

/* The x-axis tick mark gutter on the bottom. */
figure.chart .ticks.x {
  width: var(--vis-width);
  overflow: hidden; /* Prevents the tick text from adding weird trailing space on the right side. */
}
figure.chart .ticks.x > div { /* TODO: categorical-numerical. */
  position: absolute;
  left: calc(1px + (var(--i) + 0.5) * (var(--bar-step)));
}

figure.chart .ticks.x > div > span.label {
  transform-origin: center left;
  transform: rotate(45deg);
  padding-top: 1px;
  padding-left: 1px;
  position: absolute;
  white-space: nowrap;
}
figure.chart .ticks.x > div > span.tick {
  position: absolute;
  height: var(--tick-len);
}


/*
The y-axis tick mark gutter on the left.
Y-axis tick marks positioning trick:
We use relative positioning so that the tick elements participate in document layout and influence the sizes of the left gutter.
We use a height of zero to position the tick mark as if it were absolute, without having to account for the sizes stacking up.
If we instead try to use absolute positioning, then the tick text and mark do not affect the gutter width.
Because of the zero size trick, we use a child span to hold the text.
The parent div has zero height, so the text hangs below the specified vertical position.
The child span allows us to use a transform that centers it around the specified position.
*/
figure.chart .ticks.y > div {
  position: relative;
  height: 0;
  top: calc(100% * (1 - var(--v)));
  white-space: nowrap;
  vertical-align: middle;
}

figure.chart .ticks.y > div > span.label {
  /* We a use a child span to hold the text.
  Because the parent div has zero height, the text hangs below the specified vertical position.
  The child span allows us to transform the text and center it around the specified position. */
  transform: translateY(-50%);
}
figure.chart .ticks.y > div > span.tick {
  width: var(--tick-len);
  vertical-align: top;
  transform: translateY(-50%); /* Half pixel translation up. TODO: only on retina? */
}


figure.chart .vis { /* The data visualization area. */
  width: var(--vis-width);
  position: relative;
}
figure.chart .vis > .series {
  position: absolute;
  width: 100%;
  height: 100%;
}

figure.chart.categorical-numerical .vis > .series.bar {
  width: var(--vis-width);
}

figure.chart.categorical-numerical .vis > .series.bar > div {
  position: absolute;
  min-width: 4px;
  height: calc(100% * var(--v));
  width: var(--bar-width);
  left: calc(1px + var(--i) * var(--bar-step));
  bottom: 0;
  background-color: var(--series-color);
  border-width: var(--chart-bar-border-width);
  border-style: solid;
}

.swatch {
  display: inline-block;
  background-color: var(--series-color);
}

/* User-configurable style. */

figure.chart * {
  box-sizing: border-box;
}
figure.chart {
  position: relative;
  width: 100%;
  height: 100%;
  margin: 0;
  --chart-bar-border-width: 1px;
  --series-color: gray; /* Default, can be overridden per series. */
}
figure.chart > figcaption {
  padding: 0.5rem 0;
  background-color: lightgray;
}
figure.chart > .legend {
  padding: 0.5rem 0;
  background-color: lightgray;
}
figure.chart .vis-row {
}
figure.chart .origin {
  background-color: inherit;
}
figure.chart .vis-scroll {
  height: auto;
}
figure.chart .ticks.x {
  background-color: inherit;
}
figure.chart .ticks.y {
  background-color: inherit;
}
figure.chart .ticks > div > span.label {
  font-size: calc(1em * var(--tick-font-scale));
  /* ^ Note: the font-size must be set using --tick-font-scale so that both the height and final half step calculations work. */
}
figure.chart .ticks > div > span.tick {
  background-color: black;
}
figure.chart .ticks.y > div {
  text-align: right;
}
figure.chart .ticks > div > span.tick {
  background-color: black;
}
figure.chart .ticks.x > div > span.tick {
  width: 1px;
}
figure.chart .ticks.y > div > span.tick {
  margin-left: 0.125rem;
  height: 1px;
}

figure.chart .series > div {
    border-color: black;
}

figure.chart .Series0 {
  --series-color: #888;
}
figure.chart .Series1 {
  --series-color: #999;
}
figure.chart .Series2 {
  --series-color: #AAA;
}
figure.chart .Series3 {
  --series-color: #BBB;
}

figure.chart .swatch {
  width: 1rem;
  height: 1rem;
  margin-right: 0.5rem;
  vertical-align: middle;
  border-radius: 0.25rem;
}
