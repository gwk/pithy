# Dedicated to the public domain under CC0: https://creativecommons.org/publicdomain/zero/1.0/.

from typing import Any, Callable, Iterable, Iterator

from pithy.typing import OptBaseExc, OptTraceback, OptTypeBaseExc


class Error(Exception): ...

class AbortError(Error): ...
class AuthError(Error): ...
class BindingsError(Error): ...
class BusyError(Error): ...
class CantOpenError(Error): ...
class ConnectionClosedError(Error): ...
class ConnectionNotClosedError(Error): ...
class ConstraintError(Error): ...
class CorruptError(Error): ...
class CursorClosedError(Error): ...
class EmptyError(Error): ...
class ExecTraceAbort(Error): ...
class ExecutionCompleteError(Error): ...
class ExtensionLoadingError(Error): ...
class ForkingViolationError(Error): ...
class FormatError(Error): ...
class FullError(Error): ...
class IncompleteExecutionError(Error): ...
class InternalError(Error): ...
class InterruptError(Error): ...
class IOError(Error): ...
class LockedError(Error): ...
class MismatchError(Error): ...
class MisuseError(Error): ...
class NoLFSError(Error): ...
class NoMemError(Error): ...
class NotADBError(Error): ...
class NotFoundError(Error): ...
class PermissionsError(Error): ...
class ProtocolError(Error): ...
class RangeError(Error): ...
class ReadOnlyError(Error): ...
class SchemaChangeError(Error): ...
class SQLError(Error): ...


class Connection:
  filename:str
  open_flags:int = ...
  open_vfs:'VFS|None' = None
  statementcachesize:int = ...

  def __init__(self, filename:str, flags:int=..., vfs:'VFS|None'=None, statementcachesize:int=...): ...

  def __enter__(self, *args, **kwargs) -> Any: ...
  def __exit__(self, *args, **kwargs) -> Any: ...

  @classmethod
  def backup(self, databasename:str, sourceconnection:'Connection', sourcedatabasename:str)  -> '_Backup': ...

  def blobopen(self, *args, **kwargs) -> Any: ...
  def changes(self, *args, **kwargs) -> Any: ...
  def close(self, *args, **kwargs) -> Any: ...
  def collationneeded(self, *args, **kwargs) -> Any: ...
  def config(self, *args, **kwargs) -> Any: ...
  def createaggregatefunction(self, *args, **kwargs) -> Any: ...
  def createcollation(self, *args, **kwargs) -> Any: ...
  def createmodule(self, *args, **kwargs) -> Any: ...
  def createscalarfunction(self, *args, **kwargs) -> Any: ...
  def cursor(self, *args, **kwargs) -> 'Cursor': ...
  def db_filename(self, *args, **kwargs) -> Any: ...
  def enableloadextension(self, *args, **kwargs) -> Any: ...
  def filecontrol(self, *args, **kwargs) -> Any: ...
  def getautocommit(self, *args, **kwargs) -> Any: ...
  def getexectrace(self, *args, **kwargs) -> Any: ...
  def getrowtrace(self, *args, **kwargs) -> Any: ...
  def interrupt(self, *args, **kwargs) -> Any: ...
  def last_insert_rowid(self, *args, **kwargs) -> Any: ...
  def limit(self, *args, **kwargs) -> Any: ...
  def loadextension(self, *args, **kwargs) -> Any: ...
  def overloadfunction(self, *args, **kwargs) -> Any: ...
  def readonly(self, *args, **kwargs) -> Any: ...
  def setauthorizer(self, *args, **kwargs) -> Any: ...
  def setbusyhandler(self, *args, **kwargs) -> Any: ...
  def setbusytimeout(self, *args, **kwargs) -> Any: ...
  def setcommithook(self, *args, **kwargs) -> Any: ...
  def setexectrace(self, *args, **kwargs) -> Any: ...
  def setprofile(self, *args, **kwargs) -> Any: ...
  def setprogresshandler(self, *args, **kwargs) -> Any: ...
  def setrollbackhook(self, *args, **kwargs) -> Any: ...
  def setrowtrace(self, *args, **kwargs) -> Any: ...
  def setupdatehook(self, *args, **kwargs) -> Any: ...
  def setwalhook(self, *args, **kwargs) -> Any: ...
  def sqlite3pointer(self, *args, **kwargs) -> Any: ...
  def status(self, *args, **kwargs) -> Any: ...
  def totalchanges(self, *args, **kwargs) -> Any: ...
  def wal_autocheckpoint(self, *args, **kwargs) -> Any: ...
  def wal_checkpoint(self, *args, **kwargs) -> Any: ...



IterOrDict = Iterable|dict

class Cursor:

  description:tuple[tuple[str,str],...]

  def __iter__(self) -> Iterator[tuple]: ...

  def close(self, force=False) -> None: ...

  def execute(self, statements:str, bindings:IterOrDict) -> 'Cursor': ...

  def executemany(self, statements:str, sequenceofbindings:Iterable[IterOrDict]) -> Iterator: ... # TODO: Iterator ok?

  def fetchall(self) -> list: ...

  def fetchone(self) -> Any: ...

  def getconnection(self) -> Connection: ...

  def getdescription(self) -> tuple[tuple[str,str],...]: ...

  def getexectrace(self) -> Callable|None: ...

  def getrowtrace(self) -> Callable|None: ...

  def setexectrace(self, trace:Callable|None) -> None: ...

  def setrowtrace(self, trace:Callable|None) -> None: ...


class Shell:
  __init__: Any = ...
  Error: Any = ...
  _append_input_description: Any = ...
  _basestring: Any = ...
  _binary_type: Any = ...
  _boolean_command: Any = ...
  _builtin_commands: Any = ...
  _cache_output_modes: Any = ...
  _colours: Any = ...
  _csvin_wrapper: Any = ...
  _ensure_db: Any = ...
  _fmt_c_string: Any = ...
  _fmt_html_col: Any = ...
  _fmt_json_value: Any = ...
  _fmt_python: Any = ...
  _fmt_sql_identifier: Any = ...
  _fmt_text_col: Any = ...
  _get_prev_tokens: Any = ...
  _getdate: Any = ...
  _getdatetime: Any = ...
  _help_info: Any = ...
  _out_colour: Any = ...
  _output_modes: Any = ...
  _output_summary: Any = ...
  _pragmas: Any = ...
  _pragmas_bool: Any = ...
  _printable: Any = ...
  _set_db: Any = ...
  _shows: Any = ...
  _sqlite_functions: Any = ...
  _sqlite_keywords: Any = ...
  _sqlite_reserved: Any = ...
  _sqlite_special_names: Any = ...
  _terminal_width: Any = ...
  cmdloop: Any = ...
  command_autoimport: Any = ...
  command_backup: Any = ...
  command_bail: Any = ...
  command_color: Any = ...
  command_colour: Any = ...
  command_databases: Any = ...
  command_dump: Any = ...
  command_echo: Any = ...
  command_encoding: Any = ...
  command_exceptions: Any = ...
  command_exit: Any = ...
  command_explain: Any = ...
  command_find: Any = ...
  command_header: Any = ...
  command_headers: Any = ...
  command_help: Any = ...
  command_import: Any = ...
  command_indices: Any = ...
  command_load: Any = ...
  command_mode: Any = ...
  command_nullvalue: Any = ...
  command_output: Any = ...
  command_print: Any = ...
  command_prompt: Any = ...
  command_quit: Any = ...
  command_read: Any = ...
  command_restore: Any = ...
  command_schema: Any = ...
  command_separator: Any = ...
  command_show: Any = ...
  command_tables: Any = ...
  command_timeout: Any = ...
  command_timer: Any = ...
  command_width: Any = ...
  complete: Any = ...
  complete_command: Any = ...
  complete_sql: Any = ...
  display_timing: Any = ...
  fixup_backslashes: Any = ...
  get_resource_usage: Any = ...
  getcompleteline: Any = ...
  getline: Any = ...
  handle_exception: Any = ...
  handle_interrupt: Any = ...
  output_column: Any = ...
  output_csv: Any = ...
  output_html: Any = ...
  output_insert: Any = ...
  output_json: Any = ...
  output_line: Any = ...
  output_list: Any = ...
  output_python: Any = ...
  output_tcl: Any = ...
  pop_input: Any = ...
  pop_output: Any = ...
  process_args: Any = ...
  process_command: Any = ...
  process_complete_line: Any = ...
  process_sql: Any = ...
  process_unknown_args: Any = ...
  push_input: Any = ...
  push_output: Any = ...
  set_encoding: Any = ...
  usage: Any = ...
  write: Any = ...
  @classmethod
  def _raw_input(*args, **kwargs) -> Any: ...
  @property
  def db(self) -> Any: ...
  @db.setter
  def db(self, val: Any) -> None: ...

class ThreadingViolationError(Error): ...

class TooBigError(Error): ...

class URIFilename:
  def filename(*args, **kwargs) -> Any: ...
  def uri_boolean(*args, **kwargs) -> Any: ...
  def uri_int(*args, **kwargs) -> Any: ...
  def uri_parameter(*args, **kwargs) -> Any: ...

class VFS:
  def __init__(*args, **kwargs) -> None: ...
  @classmethod
  def excepthook(*args, **kwargs) -> Any: ...
  def unregister(*args, **kwargs) -> Any: ...
  def xAccess(*args, **kwargs) -> Any: ...
  def xCurrentTime(*args, **kwargs) -> Any: ...
  def xDelete(*args, **kwargs) -> Any: ...
  def xDlClose(*args, **kwargs) -> Any: ...
  def xDlError(*args, **kwargs) -> Any: ...
  def xDlOpen(*args, **kwargs) -> Any: ...
  def xDlSym(*args, **kwargs) -> Any: ...
  def xFullPathname(*args, **kwargs) -> Any: ...
  def xGetLastError(*args, **kwargs) -> Any: ...
  def xGetSystemCall(*args, **kwargs) -> Any: ...
  def xNextSystemCall(*args, **kwargs) -> Any: ...
  def xOpen(*args, **kwargs) -> Any: ...
  def xRandomness(*args, **kwargs) -> Any: ...
  def xSetSystemCall(*args, **kwargs) -> Any: ...
  def xSleep(*args, **kwargs) -> Any: ...

class VFSFile:
  def __init__(*args, **kwargs) -> None: ...
  @classmethod
  def excepthook(*args, **kwargs) -> Any: ...
  def xCheckReservedLock(*args, **kwargs) -> Any: ...
  def xClose(*args, **kwargs) -> Any: ...
  def xDeviceCharacteristics(*args, **kwargs) -> Any: ...
  def xFileControl(*args, **kwargs) -> Any: ...
  def xFileSize(*args, **kwargs) -> Any: ...
  def xLock(*args, **kwargs) -> Any: ...
  def xRead(*args, **kwargs) -> Any: ...
  def xSectorSize(*args, **kwargs) -> Any: ...
  def xSync(*args, **kwargs) -> Any: ...
  def xTruncate(*args, **kwargs) -> Any: ...
  def xUnlock(*args, **kwargs) -> Any: ...
  def xWrite(*args, **kwargs) -> Any: ...

class VFSFileClosedError(Error): ...

class VFSNotImplementedError(Error): ...


class backup:

  done:bool
  pagecount:int
  remaining:int

  def __enter__(self) -> None: ...
  def __exit__(self, *args, **kwargs) -> bool: ...
  def close(self, force=False) -> None: ...

  def finish(self) -> None: ...

  def step(self, npages:int=...) -> bool: ...

_Backup = backup


class blob:
  def __enter__(self) -> None: ...

  def __exit__(self, exc_type:OptTypeBaseExc, exc_value:OptBaseExc, traceback:OptTraceback) -> bool|None: ...



class zeroblob:

  def __init__(self, size:int): ...

  @classmethod
  def length(*args, **kwargs) -> Any: ...



def apswversion() -> str: ...

def complete(statement:str) -> bool: ...

def config(op:int, *args:Any) -> None: ...

def enablesharedcache(bool) -> None: ...

def exceptionfor(int) -> Exception: ...

def fork_checker() -> None: ...

def format_sql_value(value:Any) -> str: ...

def initialize() -> None: ...

def log(level:int, msg:str) -> None: ...

def main() -> None: ...

def memoryhighwater(reset=False) -> int: ...

def memoryused() -> int: ...

def randomness(count:int) -> bytes: ...

def releasememory(count:int) -> int: ...

def shutdown() -> None: ...

def softheaplimit(count:int) -> int: ...

def sqlite3_sourceid() -> str: ...

def sqlitelibversion() -> None: ...

def status(op:int, reset=False) -> tuple[int, int]: ...

def vfsnames() -> list[str]: ...


SQLITE_ABORT: int
SQLITE_ABORT_ROLLBACK: int
SQLITE_ACCESS_EXISTS: int
SQLITE_ACCESS_READ: int
SQLITE_ACCESS_READWRITE: int
SQLITE_ALTER_TABLE: int
SQLITE_ANALYZE: int
SQLITE_ATTACH: int
SQLITE_AUTH: int
SQLITE_AUTH_USER: int
SQLITE_BUSY: int
SQLITE_BUSY_RECOVERY: int
SQLITE_BUSY_SNAPSHOT: int
SQLITE_CANTOPEN: int
SQLITE_CANTOPEN_CONVPATH: int
SQLITE_CANTOPEN_FULLPATH: int
SQLITE_CANTOPEN_ISDIR: int
SQLITE_CANTOPEN_NOTEMPDIR: int
SQLITE_CHECKPOINT_FULL: int
SQLITE_CHECKPOINT_PASSIVE: int
SQLITE_CHECKPOINT_RESTART: int
SQLITE_CHECKPOINT_TRUNCATE: int
SQLITE_CONFIG_COVERING_INDEX_SCAN: int
SQLITE_CONFIG_GETMALLOC: int
SQLITE_CONFIG_GETMUTEX: int
SQLITE_CONFIG_GETPCACHE: int
SQLITE_CONFIG_GETPCACHE2: int
SQLITE_CONFIG_HEAP: int
SQLITE_CONFIG_LOG: int
SQLITE_CONFIG_LOOKASIDE: int
SQLITE_CONFIG_MALLOC: int
SQLITE_CONFIG_MEMSTATUS: int
SQLITE_CONFIG_MMAP_SIZE: int
SQLITE_CONFIG_MULTITHREAD: int
SQLITE_CONFIG_MUTEX: int
SQLITE_CONFIG_PAGECACHE: int
SQLITE_CONFIG_PCACHE: int
SQLITE_CONFIG_PCACHE2: int
SQLITE_CONFIG_PCACHE_HDRSZ: int
SQLITE_CONFIG_PMASZ: int
SQLITE_CONFIG_SCRATCH: int
SQLITE_CONFIG_SERIALIZED: int
SQLITE_CONFIG_SINGLETHREAD: int
SQLITE_CONFIG_SQLLOG: int
SQLITE_CONFIG_URI: int
SQLITE_CONFIG_WIN32_HEAPSIZE: int
SQLITE_CONSTRAINT: int
SQLITE_CONSTRAINT_CHECK: int
SQLITE_CONSTRAINT_COMMITHOOK: int
SQLITE_CONSTRAINT_FOREIGNKEY: int
SQLITE_CONSTRAINT_FUNCTION: int
SQLITE_CONSTRAINT_NOTNULL: int
SQLITE_CONSTRAINT_PRIMARYKEY: int
SQLITE_CONSTRAINT_ROWID: int
SQLITE_CONSTRAINT_TRIGGER: int
SQLITE_CONSTRAINT_UNIQUE: int
SQLITE_CONSTRAINT_VTAB: int
SQLITE_COPY: int
SQLITE_CORRUPT: int
SQLITE_CORRUPT_VTAB: int
SQLITE_CREATE_INDEX: int
SQLITE_CREATE_TABLE: int
SQLITE_CREATE_TEMP_INDEX: int
SQLITE_CREATE_TEMP_TABLE: int
SQLITE_CREATE_TEMP_TRIGGER: int
SQLITE_CREATE_TEMP_VIEW: int
SQLITE_CREATE_TRIGGER: int
SQLITE_CREATE_VIEW: int
SQLITE_CREATE_VTABLE: int
SQLITE_DBCONFIG_ENABLE_FKEY: int
SQLITE_DBCONFIG_ENABLE_TRIGGER: int
SQLITE_DBCONFIG_LOOKASIDE: int
SQLITE_DBSTATUS_CACHE_HIT: int
SQLITE_DBSTATUS_CACHE_MISS: int
SQLITE_DBSTATUS_CACHE_USED: int
SQLITE_DBSTATUS_CACHE_WRITE: int
SQLITE_DBSTATUS_DEFERRED_FKS: int
SQLITE_DBSTATUS_LOOKASIDE_HIT: int
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL: int
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE: int
SQLITE_DBSTATUS_LOOKASIDE_USED: int
SQLITE_DBSTATUS_MAX: int
SQLITE_DBSTATUS_SCHEMA_USED: int
SQLITE_DBSTATUS_STMT_USED: int
SQLITE_DELETE: int
SQLITE_DENY: int
SQLITE_DETACH: int
SQLITE_DONE: int
SQLITE_DROP_INDEX: int
SQLITE_DROP_TABLE: int
SQLITE_DROP_TEMP_INDEX: int
SQLITE_DROP_TEMP_TABLE: int
SQLITE_DROP_TEMP_TRIGGER: int
SQLITE_DROP_TEMP_VIEW: int
SQLITE_DROP_TRIGGER: int
SQLITE_DROP_VIEW: int
SQLITE_DROP_VTABLE: int
SQLITE_EMPTY: int
SQLITE_ERROR: int
SQLITE_FAIL: int
SQLITE_FCNTL_BUSYHANDLER: int
SQLITE_FCNTL_CHUNK_SIZE: int
SQLITE_FCNTL_COMMIT_PHASETWO: int
SQLITE_FCNTL_FILE_POINTER: int
SQLITE_FCNTL_GET_LOCKPROXYFILE: int
SQLITE_FCNTL_HAS_MOVED: int
SQLITE_FCNTL_LAST_ERRNO: int
SQLITE_FCNTL_LOCKSTATE: int
SQLITE_FCNTL_MMAP_SIZE: int
SQLITE_FCNTL_OVERWRITE: int
SQLITE_FCNTL_PERSIST_WAL: int
SQLITE_FCNTL_POWERSAFE_OVERWRITE: int
SQLITE_FCNTL_PRAGMA: int
SQLITE_FCNTL_RBU: int
SQLITE_FCNTL_SET_LOCKPROXYFILE: int
SQLITE_FCNTL_SIZE_HINT: int
SQLITE_FCNTL_SYNC: int
SQLITE_FCNTL_SYNC_OMITTED: int
SQLITE_FCNTL_TEMPFILENAME: int
SQLITE_FCNTL_TRACE: int
SQLITE_FCNTL_VFSNAME: int
SQLITE_FCNTL_WAL_BLOCK: int
SQLITE_FCNTL_WIN32_AV_RETRY: int
SQLITE_FCNTL_WIN32_SET_HANDLE: int
SQLITE_FCNTL_ZIPVFS: int
SQLITE_FORMAT: int
SQLITE_FULL: int
SQLITE_FUNCTION: int
SQLITE_IGNORE: int
SQLITE_INDEX_CONSTRAINT_EQ: int
SQLITE_INDEX_CONSTRAINT_GE: int
SQLITE_INDEX_CONSTRAINT_GT: int
SQLITE_INDEX_CONSTRAINT_LE: int
SQLITE_INDEX_CONSTRAINT_LT: int
SQLITE_INDEX_CONSTRAINT_MATCH: int
SQLITE_INSERT: int
SQLITE_INTERNAL: int
SQLITE_INTERRUPT: int
SQLITE_IOCAP_ATOMIC: int
SQLITE_IOCAP_ATOMIC16K: int
SQLITE_IOCAP_ATOMIC1K: int
SQLITE_IOCAP_ATOMIC2K: int
SQLITE_IOCAP_ATOMIC32K: int
SQLITE_IOCAP_ATOMIC4K: int
SQLITE_IOCAP_ATOMIC512: int
SQLITE_IOCAP_ATOMIC64K: int
SQLITE_IOCAP_ATOMIC8K: int
SQLITE_IOCAP_IMMUTABLE: int
SQLITE_IOCAP_POWERSAFE_OVERWRITE: int
SQLITE_IOCAP_SAFE_APPEND: int
SQLITE_IOCAP_SEQUENTIAL: int
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN: int
SQLITE_IOERR: int
SQLITE_IOERR_ACCESS: int
SQLITE_IOERR_BLOCKED: int
SQLITE_IOERR_CHECKRESERVEDLOCK: int
SQLITE_IOERR_CLOSE: int
SQLITE_IOERR_CONVPATH: int
SQLITE_IOERR_DELETE: int
SQLITE_IOERR_DELETE_NOENT: int
SQLITE_IOERR_DIR_CLOSE: int
SQLITE_IOERR_DIR_FSYNC: int
SQLITE_IOERR_FSTAT: int
SQLITE_IOERR_FSYNC: int
SQLITE_IOERR_GETTEMPPATH: int
SQLITE_IOERR_LOCK: int
SQLITE_IOERR_MMAP: int
SQLITE_IOERR_NOMEM: int
SQLITE_IOERR_RDLOCK: int
SQLITE_IOERR_READ: int
SQLITE_IOERR_SEEK: int
SQLITE_IOERR_SHMLOCK: int
SQLITE_IOERR_SHMMAP: int
SQLITE_IOERR_SHMOPEN: int
SQLITE_IOERR_SHMSIZE: int
SQLITE_IOERR_SHORT_READ: int
SQLITE_IOERR_TRUNCATE: int
SQLITE_IOERR_UNLOCK: int
SQLITE_IOERR_VNODE: int
SQLITE_IOERR_WRITE: int
SQLITE_LIMIT_ATTACHED: int
SQLITE_LIMIT_COLUMN: int
SQLITE_LIMIT_COMPOUND_SELECT: int
SQLITE_LIMIT_EXPR_DEPTH: int
SQLITE_LIMIT_FUNCTION_ARG: int
SQLITE_LIMIT_LENGTH: int
SQLITE_LIMIT_LIKE_PATTERN_LENGTH: int
SQLITE_LIMIT_SQL_LENGTH: int
SQLITE_LIMIT_TRIGGER_DEPTH: int
SQLITE_LIMIT_VARIABLE_NUMBER: int
SQLITE_LIMIT_VDBE_OP: int
SQLITE_LIMIT_WORKER_THREADS: int
SQLITE_LOCKED: int
SQLITE_LOCKED_SHAREDCACHE: int
SQLITE_LOCK_EXCLUSIVE: int
SQLITE_LOCK_NONE: int
SQLITE_LOCK_PENDING: int
SQLITE_LOCK_RESERVED: int
SQLITE_LOCK_SHARED: int
SQLITE_MISMATCH: int
SQLITE_MISUSE: int
SQLITE_NOLFS: int
SQLITE_NOMEM: int
SQLITE_NOTADB: int
SQLITE_NOTFOUND: int
SQLITE_NOTICE: int
SQLITE_NOTICE_RECOVER_ROLLBACK: int
SQLITE_NOTICE_RECOVER_WAL: int
SQLITE_OK: int
SQLITE_OPEN_AUTOPROXY: int
SQLITE_OPEN_CREATE: int
SQLITE_OPEN_DELETEONCLOSE: int
SQLITE_OPEN_EXCLUSIVE: int
SQLITE_OPEN_FULLMUTEX: int
SQLITE_OPEN_MAIN_DB: int
SQLITE_OPEN_MAIN_JOURNAL: int
SQLITE_OPEN_MASTER_JOURNAL: int
SQLITE_OPEN_MEMORY: int
SQLITE_OPEN_NOMUTEX: int
SQLITE_OPEN_PRIVATECACHE: int
SQLITE_OPEN_READONLY: int
SQLITE_OPEN_READWRITE: int
SQLITE_OPEN_SHAREDCACHE: int
SQLITE_OPEN_SUBJOURNAL: int
SQLITE_OPEN_TEMP_DB: int
SQLITE_OPEN_TEMP_JOURNAL: int
SQLITE_OPEN_TRANSIENT_DB: int
SQLITE_OPEN_URI: int
SQLITE_OPEN_WAL: int
SQLITE_PERM: int
SQLITE_PRAGMA: int
SQLITE_PROTOCOL: int
SQLITE_RANGE: int
SQLITE_READ: int
SQLITE_READONLY: int
SQLITE_READONLY_CANTLOCK: int
SQLITE_READONLY_DBMOVED: int
SQLITE_READONLY_RECOVERY: int
SQLITE_READONLY_ROLLBACK: int
SQLITE_RECURSIVE: int
SQLITE_REINDEX: int
SQLITE_REPLACE: int
SQLITE_ROLLBACK: int
SQLITE_ROW: int
SQLITE_SAVEPOINT: int
SQLITE_SCHEMA: int
SQLITE_SELECT: int
SQLITE_SHM_EXCLUSIVE: int
SQLITE_SHM_LOCK: int
SQLITE_SHM_SHARED: int
SQLITE_SHM_UNLOCK: int
SQLITE_STATUS_MALLOC_COUNT: int
SQLITE_STATUS_MALLOC_SIZE: int
SQLITE_STATUS_MEMORY_USED: int
SQLITE_STATUS_PAGECACHE_OVERFLOW: int
SQLITE_STATUS_PAGECACHE_SIZE: int
SQLITE_STATUS_PAGECACHE_USED: int
SQLITE_STATUS_PARSER_STACK: int
SQLITE_STATUS_SCRATCH_OVERFLOW: int
SQLITE_STATUS_SCRATCH_SIZE: int
SQLITE_STATUS_SCRATCH_USED: int
SQLITE_SYNC_DATAONLY: int
SQLITE_SYNC_FULL: int
SQLITE_SYNC_NORMAL: int
SQLITE_TOOBIG: int
SQLITE_TRANSACTION: int
SQLITE_UPDATE: int
SQLITE_VERSION_NUMBER: int
SQLITE_VTAB_CONSTRAINT_SUPPORT: int
SQLITE_WARNING: int
SQLITE_WARNING_AUTOINDEX: int
compile_options: tuple[str,...]
connection_hooks:list[Callable[[Connection],None]]
mapping_access: Any
mapping_authorizer_function: Any
mapping_authorizer_return: Any
mapping_bestindex_constraints: Any
mapping_config: Any
mapping_conflict_resolution_modes: Any
mapping_db_config: Any
mapping_db_status: Any
mapping_device_characteristics: Any
mapping_extended_result_codes: Any
mapping_file_control: Any
mapping_limits: Any
mapping_locking_level: Any
mapping_open_flags: Any
mapping_result_codes: Any
mapping_status: Any
mapping_sync: Any
mapping_virtual_table_configuration_options: Any
mapping_wal_checkpoint: Any
mapping_xshmlock_flags: Any
using_amalgamation: bool
